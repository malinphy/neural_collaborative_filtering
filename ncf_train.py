# -*- coding: utf-8 -*-
"""SciBERT demo.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HUoQiRKgwlTfZv44ZT8vrJqtSY9B2sXE
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
plt.style.use('ggplot')
from sklearn.metrics import confusion_matrix
from sklearn.metrics import classification_report
from sklearn.utils import shuffle

import tensorflow as tf
from tensorflow import keras 
from tensorflow.keras import layers,Input, Model
from tensorflow.keras.layers import Dense, Concatenate, Multiply, Embedding,Dot, Dropout
from tensorflow.keras.layers import *

from helper_functions import encoder_2, sequencer, train_test_maker
from negative_makers import train_neg_maker, test_negative_maker
from config import config
import pickle
from model import model

config = config()

u_item_link = 'https://raw.githubusercontent.com/malinphy/datasets/main/ml100K/u_item.csv'
item_df = pd.read_csv(u_item_link)
item_df = item_df[['movie id', 'movie title']]
item_df = item_df.rename(columns={"movie id": "item_id","movie title": "movie_title"})

u_data_link = 'https://raw.githubusercontent.com/malinphy/datasets/main/ml100K/u.data'
df = pd.read_csv(u_data_link,delimiter='\t',header=None)
col_titles = ['user_id', 'item_id' , 'rating' , 'timestamp']
df.columns = col_titles
df = df.drop(columns = ['timestamp'])

num_users = len(df['user_id'].unique())
num_items = len(df['item_id'].unique())

user_2enc, enc_2user = encoder_2(df, 'user_id')
item_2enc, enc_2item = encoder_2(df, 'item_id')

df['user_id_enc']= df['user_id'].map(enc_2user).astype('int32')
df['item_id_enc']= df['item_id'].map(enc_2item).astype('int32')
unique_user_enc = user_2enc.keys()
unique_item_enc = item_2enc.keys()

df_enc = df[['user_id_enc','item_id_enc','rating']]
df_enc.head(3)

df_2 = df_enc[['user_id_enc','item_id_enc','rating']]
df_2['rating'] = 1
df_enc_seq =sequencer(df_2,'user_id_enc')
df_enc_seq.head(3)

item_2title = { item_df['item_id'][i] : item_df['movie_title'][i]  for i in range(len(item_df))}
title_2item = { item_df['movie_title'][i] : item_df['item_id'][i]   for i in range(len(item_df))}

last_items, mid_items = train_test_maker(df_enc_seq,'item_id_enc')

test_df_seq = pd.DataFrame({'user_id_enc':unique_user_enc,
                        'item_id_enc':np.array(last_items),
                        'rating':np.ones(len(last_items),dtype = 'int32')})

train_df_seq = pd.DataFrame({'user_id_enc':unique_user_enc,
                        'item_id_enc':mid_items,
                        'rating':np.ones(len(mid_items),dtype = 'int32')})

test_df = pd.DataFrame({'user_id_enc':df_enc_seq['user_id_enc'].copy(),
                        'item_id_enc':last_items, 
                        'rating' : np.ones(len(last_items),dtype='int32') 
                         })

last_items, mid_items = train_test_maker(df_enc_seq,'item_id_enc')

test_df_seq = pd.DataFrame({'user_id_enc':unique_user_enc,
                        'item_id_enc':np.array(last_items),
                        'rating':np.ones(len(last_items),dtype = 'int32')})

train_df_seq = pd.DataFrame({'user_id_enc':unique_user_enc,
                        'item_id_enc':mid_items,
                        'rating':np.ones(len(mid_items),dtype = 'int32')})

test_df = pd.DataFrame({'user_id_enc':df_enc_seq['user_id_enc'].copy(),
                        'item_id_enc':last_items, 
                        'rating' : np.ones(len(last_items),dtype='int32') 
                         })

user_create = []
for i in range(len(mid_items)):
  # len(mid_items[i])
  user_create.append(np.full(len(mid_items[i]),i))

train_df = pd.DataFrame({'user_id_enc':np.concatenate(user_create),
                        'item_id_enc':np.concatenate(mid_items), 
                        'ratings' : np.ones(len(np.concatenate(user_create)),dtype='int32') 
                         })

us , neg3 = train_neg_maker(config.TRAIN_NEG_NUM,df_enc_seq,'item_id_enc',unique_item_enc)

train_neg = pd.DataFrame({'user_id_enc':us,
              'item_id_enc':np.concatenate(np.concatenate(np.array(neg3))),
              'ratings':np.zeros(len(us), dtype='int32')})

test_negs = test_negative_maker(config.TEST_NEG_NUM,test_df_seq,'item_id_enc',unique_item_enc)
test_negatives = pd.DataFrame(test_negs)
test_negatives
test_negatives.columns = np.arange(1,config.TEST_NEG_NUM+1)

train_total = shuffle(pd.concat([train_neg,train_df]))

mlp_model = model(num_users, num_items)
mlp_model.compile(
    # loss = tf.keras.losses.BinaryCrossentropy(),
    loss = 'BinaryCrossentropy',
    optimizer = 'Adam',
    metrics = ['accuracy']
    )

mlp_hist = mlp_model.fit([train_total['user_id_enc'], train_total['item_id_enc']],
              train_total['ratings'],
              epochs = config.NUM_EPOCHS,
            #   verbose = 0,
            #   batch_size = BATCH_SIZE
              )

# saving_dir = './'
# mlp_model.save_weights(saving_dir+ 'mlp_model_weights.h5')